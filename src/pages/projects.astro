---
import { listProjects } from '../entities/project/api'
import BaseLayout from '../layouts/base-layout.astro'

const projects = await listProjects()

const previous = projects.at(-1)!.data
const current = projects.at(0)!
const next = projects.at(1)!.data
---

<BaseLayout
  title='Projets'
  description="Bienvenue dans ma galerie de projets ! En tant qu'étudiant en 3D à Besançon. Explorez mon univers artistique et laissez-vous séduire par mes réalisations"
>
  <section class='projets'>
    <div class='nav'>
      <div class='nav-content'>
        <div>top-left</div>
        <div>top-right</div>
        <div>bottom-left</div>
        <div>bottom-right</div>
      </div>
    </div>
    <div class='previous-project'>
      <div class='titles'>
        <h2 class='last'>
          <div>{previous.title}</div>
          <div>{previous.title2}</div>
        </h2>
      </div>
    </div>
    <div class='projet'>
      <div class='wrapper'>
        <a
          href={`/projects/${current.slug}`}
          class='links titles current-titles'
        >
          <h2 class='first'>
            <div>{current.data.title}</div>
            <div>{current.data.title2}</div>
          </h2>
          <h2 class='last'>
            <div>{current.data.title}</div>
            <div>{current.data.title2}</div>
          </h2>
        </a>
        <a
          href={`/projects/${current.slug}`}
          aria-label='lien vers le projet actuel'
          class='links image'
        >
          <div style='position: relative; height: 100%;' class='images'>
            <img id='image' src={current.data.image} alt='image du projet' />
            <div class='layer'></div>
          </div>
        </a>
      </div>
    </div>
    <div class='index'>
      <span id='project-index'>01</span><span
        style='font-weight: 400; font-size: 1.2vw'>&#10187;</span
      ><span class='project-total'
        >{projects.length < 10 ? `0${projects.length}` : projects.length}</span
      >
    </div>
    <div class='next-project'>
      <div class='titles'>
        <h2 class='last'>
          <div>{next.title}</div>
          <div>{next.title2}</div>
        </h2>
      </div>
    </div>
  </section>
</BaseLayout>

<style>
  * {
    box-sizing: border-box;
  }

  body {
    margin: 0;
  }

  .nav {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;

    padding: 120px 160px;

    background-color: transparent;
  }

  .nav-content {
    position: relative;
    height: 100%;
    color: white;
  }
  .nav-content div:first-child {
    position: absolute;
    top: 0;
    left: 0;
  }
  .nav-content div:nth-child(3) {
    position: absolute;
    bottom: 0;
    left: 0;
  }
  .nav-content div:last-child {
    position: absolute;
    bottom: 0;
    right: 0;
  }
  .nav-content div:nth-child(2) {
    position: absolute;
    top: 0;
    right: 0;
  }

  .previous-project {
    width: 68%;
    margin: 0 auto;
    transform: translateY(calc(-307px / 4.8));
    transition: all 0.4s cubic-bezier(0.165, 0.84, 0.44, 1);
  }

  .previous-project.hide {
    transform: translateY(-270px);
    opacity: 0;
  }

  .next-project {
    width: 68%;
    margin: 0 auto;
    transform: translateY(calc(-307px / 1.27));
    transition: all 0.4s cubic-bezier(0.165, 0.84, 0.44, 1);
  }

  .next-project.hide {
    transform: translateY(-70px);
    opacity: 0;
  }

  .projets {
    height: 100vh;
    background: #333;
    overflow: hidden;
  }

  .projet {
    width: 68%;
    height: 100%;
    margin: 0 auto;
    display: flex;
    align-items: center;
  }

  .wrapper {
    font-family: aktiv-grotesk, sans-serif;
    width: 100%;
    height: 755px;
    position: relative;
    display: flex;
    align-items: center;
  }

  .titles {
    font-family: 'aktiv-grotesk-extended';
    /* letter-spacing: 4px; */
    text-transform: uppercase;
    position: relative;
  }

  .titles h2 {
    font-weight: 800;
    font-size: 6vw;
    color: white;
    font-style: normal;
    line-height: 100%;
    /* transform-origin: 100% 50%; */
  }

  .previous-project .titles h2.last,
  .next-project .titles h2.last {
    -webkit-text-stroke: 1px white;
  }

  .content-left {
    position: relative;
    display: flex;
    align-items: center;
    height: 100%;
  }

  .index {
    font-family: 'aktiv-grotesk';
    position: absolute;
    bottom: 0;
    font-size: 1.7vw;
    color: white;
    font-weight: 600;
    top: 68.5%;
    left: 16.4%;
  }
  .index .project-total {
    font-size: 0.9vw;
  }

  .image {
    position: fixed;
    left: 40%;
    /* Modifier taille d'image dans projects carrouse */
    width: 1029px;
    height: 643px;

    /* right: 0; */
  }
  .image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .layer {
    /* transition: all 0.85s cubic-bezier(0.165, 0.84, 0.44, 1); */
    /* content: ''; */
    background: rgb(162, 116, 210);
    padding-bottom: -20px;
    opacity: 0.4;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
    position: absolute;
  }
  .image.active::after {
    background: none;
  }

  .wrapper h2 {
    /* transition: all 0.4s cubic-bezier(0.165, 0.84, 0.44, 1);ss */
  }
  .wrapper img {
    /* transition: all 0.8s cubic-bezier(0.165, 0.84, 0.44, 1); */
  }
  .wrapper a {
    text-decoration: none;
  }

  .wrapper h2.active {
    /* font-size: 7vw; */
    transform: scale(1.15);
  }

  .wrapper .image.active img,
  .wrapper .image.active::after {
    transform: scale(1.1);
  }

  .start.up .last,
  .start.up .first {
    animation: 0.4s fade, 0.4s slideDown;
  }

  .start .images {
    animation: 0.8s skewImage ease-in;
  }

  .start.down .last,
  .start.down .first {
    animation: 0.4s fade, 0.4s slideUp;
  }

  .stop {
    animation: none;
  }

  @keyframes fade {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  @keyframes slideDown {
    from {
      transform: translateY(200%);
    }
    to {
      transform: translateY(0);
    }
  }

  @keyframes slideUp {
    from {
      transform: translateY(-200%);
    }
    to {
      transform: translateY(0);
    }
  }

  @keyframes skewImage {
    from {
      transform: translateX(0);
    }
    40%,
    70% {
      opacity: 0;
      transform: translateX(300px) skew(-10deg);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }
  /* lancer anim 2 sur image2 quand anim1 sur image1 est fini */

  .titles h2.first {
    opacity: 1;
    /* animation: 5s; */
    /* transform: translateY(0); */
  }

  .titles h2.last {
    color: transparent;
    -webkit-text-stroke: 2px white;
    z-index: 10;
    position: absolute;
    top: 0;
    opacity: 1;
    animation: 0.2s;
    /* transform: translateY(175%); */
  }
</style>

<script>
  import { listProjects } from '../entities/project/api'

  const projects = await listProjects()

  const preloadImage = (url: string) => {
    const img = new Image()
    img.src = url
  }

  projects.forEach((project) => preloadImage(project.data.image))

  let current = 0

  document.onwheel = async (event) => {}
  let dernierAppel = 0
  let enAttente = false

  function fonctionAuScroll(deltaY: number) {
    const maintenant = Date.now()

    if (!enAttente && maintenant - dernierAppel >= 1000) {
      // Mettre ici le code de votre fonction à exécuter lors du défilement de la molette
      const section = document.querySelector('.projets')!
      section.classList.remove('stop')
      section.classList.add('start')

      // section.classList.toggle(deltaY > 0 ? 'down' : 'up')

      if (deltaY > 0) {
        console.log('down', current)
        section.classList.remove('down')
        section.classList.add('up')
        if (current === projects.length - 1) {
          current = 0
        } else {
          current++
        }
      } else {
        section.classList.remove('up')
        section.classList.add('down')
        console.log('up', current)
        if (current === 0) {
          current = projects.length - 1
        } else {
          current--
        }
      }

      // Current
      const first = document.querySelector(
        '.projet .titles .first',
      ) as HTMLDivElement
      first.children[0].innerHTML = projects.at(current)?.data.title || ''
      first.children[1].innerHTML = projects.at(current)?.data.title2 || ''

      const last = document.querySelector(
        '.projet .titles .last',
      ) as HTMLDivElement
      last.children[0].innerHTML = projects.at(current)?.data.title || ''
      last.children[1].innerHTML = projects.at(current)?.data.title2 || ''

      const image = document.querySelector('.projet #image') as HTMLImageElement
      setTimeout(() => {
        image.src = projects.at(current)?.data.image || ''
      }, 400)

      const index = document.querySelector('#project-index') as HTMLSpanElement
      index.innerHTML =
        current < 10 ? `0${current + 1}` : (current + 1).toString()

      // Previous
      const previous = document.querySelector(
        '.previous-project .titles .last',
      ) as HTMLDivElement
      previous.children[0].innerHTML =
        projects.at(current - 1)?.data.title || ''
      previous.children[1].innerHTML =
        projects.at(current - 1)?.data.title2 || ''

      // Next
      const next = document.querySelector(
        '.next-project .titles .last',
      ) as HTMLDivElement
      const nextIndex = current === projects.length - 1 ? 0 : current + 1
      next.children[0].innerHTML = projects.at(nextIndex)?.data.title || ''
      next.children[1].innerHTML = projects.at(nextIndex)?.data.title2 || ''

      document.querySelectorAll('.links').forEach((link: any) => {
        link.href = `/projects/${projects.at(current)?.slug}`
      })

      // Mettre à jour le temps du dernier appel
      dernierAppel = maintenant

      // Mettre en attente pendant 5 secondes avant le prochain appel
      enAttente = true
      setTimeout(() => {
        section.classList.remove('start')
        section.classList.add('stop')
        enAttente = false
      }, 1000)
    } else {
      console.log('Veuillez patienter avant le prochain appel.')
    }
  }

  // Ajouter un gestionnaire d'événements pour le défilement de la molette (wheel)
  window.addEventListener('wheel', (event) => {
    fonctionAuScroll(event.deltaY)
  })

  const currentTitles = document.querySelector(
    '.current-titles',
  ) as HTMLHeadingElement
  const image = document.querySelector('.image') as HTMLImageElement

  currentTitles.addEventListener('mouseover', () => {
    const previous = document.querySelector('.previous-project')!
    const next = document.querySelector('.next-project')!
    const titles = document.querySelectorAll('h2')
    const img = document.querySelector('.image')!

    titles.forEach((title) => title.classList.add('active'))
    img.classList.add('active')
    previous.classList.add('hide')
    next.classList.add('hide')
  })
  image.addEventListener('mouseover', () => {
    const previous = document.querySelector('.previous-project')!
    const next = document.querySelector('.next-project')!
    const titles = document.querySelectorAll('h2')
    const img = document.querySelector('.image')!

    titles.forEach((title) => title.classList.add('active'))
    img.classList.add('active')
    previous.classList.add('hide')
    next.classList.add('hide')
  })

  currentTitles.addEventListener('mouseout', () => {
    const previous = document.querySelector('.previous-project')!
    const next = document.querySelector('.next-project')!
    const titles = document.querySelectorAll('h2')
    const img = document.querySelector('.image')!

    titles.forEach((title) => title.classList.remove('active'))
    img.classList.remove('active')
    previous.classList.remove('hide')
    next.classList.remove('hide')
  })
  image.addEventListener('mouseout', () => {
    const previous = document.querySelector('.previous-project')!
    const next = document.querySelector('.next-project')!
    const titles = document.querySelectorAll('h2')
    const img = document.querySelector('.image')!

    titles.forEach((title) => title.classList.remove('active'))
    img.classList.remove('active')
    previous.classList.remove('hide')
    next.classList.remove('hide')
  })
</script>
